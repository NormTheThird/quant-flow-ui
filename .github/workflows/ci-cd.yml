name: QuantFlow React UI CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    paths: 
      - '**'
  pull_request:
    branches: [ "main" ]
    paths: 
      - '**'

env:
  HARBOR_REGISTRY: "10.47.1.106"
  HARBOR_PROJECT: "library"
  NODE_VERSION: "22"

jobs:
  # BUILD PHASE
  build-react-ui:
    runs-on: self-hosted
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build React app
      run: npm run build
    
    - name: Login to Harbor
      run: |
        echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ env.HARBOR_REGISTRY }} \
          --username "${{ secrets.HARBOR_USERNAME }}" --password-stdin
    
    - name: Build and Push React UI Image
      id: build
      run: |
        IMAGE_TAG=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-ui:${{ github.sha }}
        IMAGE_LATEST=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/quantflow-ui:latest
        
        docker build -f Dockerfile -t $IMAGE_TAG -t $IMAGE_LATEST .
        docker push $IMAGE_TAG
        docker push $IMAGE_LATEST
        
        echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  # SECURITY SCANNING
  security-scan:
    needs: [build-react-ui]
    runs-on: self-hosted
    if: github.event_name == 'push'
    
    steps:
    - name: Run Trivy vulnerability scanner
      run: |
        IMAGE_TAG=${{ needs.build-react-ui.outputs.image-tag }}
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL $IMAGE_TAG

  # TEST DEPLOYMENT
  deploy-test:
    needs: [build-react-ui, security-scan]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'
    environment: test
    
    steps:
    - name: Setup Kubernetes Config
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl cluster-info
    
    - name: Create Harbor Registry Secret
      run: |
        export KUBECONFIG=kubeconfig
        kubectl create secret docker-registry harbor-registry \
          --docker-server=${{ env.HARBOR_REGISTRY }} \
          --docker-username="${{ secrets.HARBOR_USERNAME }}" \
          --docker-password="${{ secrets.HARBOR_PASSWORD }}" \
          -n test --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy React UI to Test Environment
      run: |
        export KUBECONFIG=kubeconfig
        IMAGE_TAG=${{ needs.build-react-ui.outputs.image-tag }}
        
        cat <<EOF | kubectl apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: quantflow-ui
          namespace: test
          labels:
            app: quantflow-ui
            environment: test
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: quantflow-ui
          template:
            metadata:
              labels:
                app: quantflow-ui
                environment: test
            spec:
              imagePullSecrets:
              - name: harbor-registry
              containers:
              - name: quantflow-ui
                image: $IMAGE_TAG
                ports:
                - containerPort: 80
                env:
                - name: NODE_ENV
                  value: "production"
                - name: REACT_APP_API_URL
                  value: "https://api-test.quantflow.local"
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: quantflow-ui-service
          namespace: test
          labels:
            app: quantflow-ui
        spec:
          selector:
            app: quantflow-ui
          ports:
          - port: 80
            targetPort: 80
            protocol: TCP
          type: NodePort
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: quantflow-ui-ingress
          namespace: test
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/proxy-body-size: "10m"
            cert-manager.io/cluster-issuer: letsencrypt-prod
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - ui-test.quantflow.local
            secretName: quantflow-ui-test-tls
          rules:
          - host: ui-test.quantflow.local
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: quantflow-ui-service
                    port:
                      number: 80
        EOF
        
        kubectl rollout status deployment/quantflow-ui -n test --timeout=300s
    
    - name: Run Health Check
      run: |
        sleep 30
        curl -k -f -H "Host: ui-test.quantflow.local" https://10.47.1.109:31651 || exit 1
        echo "âœ… React UI deployment successful and healthy!"

  # PRODUCTION DEPLOYMENT - Manual approval required
  deploy-production:
    needs: [build-react-ui, security-scan, deploy-test]
    runs-on: self-hosted
    if: false  # This disables the job

  # CLEANUP
  cleanup:
    needs: [build-react-ui, security-scan, deploy-test, deploy-production]
    runs-on: self-hosted
    if: always()
    
    steps:
    - name: Cleanup temporary files
      run: |
        rm -f kubeconfig
        docker system prune -f --filter "until=24h"
